openapi: '3.0.1'
info:
  title: 'tapedeck-20210102'
  version: '2021-03-10T02:24:51Z'
paths:
  /archive:
    get:
      parameters:
        - name: 'accessToken'
          in: 'query'
          required: true
          schema:
            type: 'string'
      responses:
        '200':
          description: '200 response'
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: 'string'
          content: {}
      security:
        - cognito-user-pool-auth: []
      x-amazon-apigateway-request-validator:
        "Validate query string parameters and\
        \ headers"
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: '200'
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json:
                "{\n \"url\": \"https://tapedeck-sample-files.s3.us-east-2.amazonaws.com/test.mp3\"\
                , \n \"desc\": \"Backwoods Halloween 2020\" \n}\n"
        requestTemplates:
          application/json: '{"statusCode": 200}'
        passthroughBehavior: 'when_no_match'
        type: 'mock'
    post:
      parameters:
        - name: 'accessToken'
          in: 'query'
          required: true
          schema:
            type: 'string'
      responses:
        '200':
          description: '200 response'
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: 'string'
          content: {}
      security:
        - cognito-user-pool-auth: []
      x-amazon-apigateway-request-validator:
        "Validate query string parameters and\
        \ headers"
      x-amazon-apigateway-integration:
        httpMethod: 'POST'
        uri: 'arn:aws:apigateway:us-east-2:lambda:path/2015-03-31/functions/arn:aws:lambda:us-east-2:336249122316:function:tapedeck-archive/invocations'
        responses:
          default:
            statusCode: '200'
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
        requestTemplates:
          application/json:
            "{\n  \"sub\": \"$context.authorizer.claims.sub\",\n \
            \ \"url\": $input.json('$.url'),\n  \"desc\": $input.json('$.desc')\n\
            }\n"
        passthroughBehavior: 'when_no_templates'
        contentHandling: 'CONVERT_TO_TEXT'
        type: 'aws'
    options:
      responses:
        '200':
          description: '200 response'
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: 'string'
            Access-Control-Allow-Methods:
              schema:
                type: 'string'
            Access-Control-Allow-Headers:
              schema:
                type: 'string'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Empty'
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: '200'
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'GET,OPTIONS,POST'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        requestTemplates:
          application/json: '{"statusCode": 200}'
        passthroughBehavior: 'when_no_match'
        type: 'mock'
  /list:
    get:
      parameters:
        - name: 'accessToken'
          in: 'query'
          required: true
          schema:
            type: 'string'
      responses:
        '200':
          description: '200 response'
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: 'string'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Empty'
      security:
        - cognito-user-pool-auth: []
      x-amazon-apigateway-request-validator:
        "Validate query string parameters and\
        \ headers"
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: '200'
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json:
                "{\n  \"objects\": [\n    { \"url\": \"https://tapedeck-sample-files.s3.us-east-2.amazonaws.com/test.mp3\"\
                , \"desc\": \"Backwoods Halloween 2020\" },\n    { \"url\": \"https://tapedeck-sample-files.s3.us-east-2.amazonaws.com/test.mp3\"\
                , \"desc\": \"Late Raisers Club 1/2/21\" },\n    { \"url\": \"https://tapedeck-sample-files.s3.us-east-2.amazonaws.com/test.mp3\"\
                , \"desc\": \"Odysey - last week\" }\n  ]\n}\n"
        requestTemplates:
          application/json: '{"statusCode": 200}'
        passthroughBehavior: 'when_no_match'
        type: 'mock'
    options:
      responses:
        '200':
          description: '200 response'
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: 'string'
            Access-Control-Allow-Methods:
              schema:
                type: 'string'
            Access-Control-Allow-Headers:
              schema:
                type: 'string'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Empty'
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: '200'
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'GET,OPTIONS'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        requestTemplates:
          application/json: '{"statusCode": 200}'
        passthroughBehavior: 'when_no_match'
        type: 'mock'
  /ping:
    get:
      responses:
        '200':
          description: '200 response'
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: 'string'
          content: {}
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: '200'
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: "{\n  \"status\": \"ok\"\n}"
        requestTemplates:
          application/json: '{"statusCode": 200}'
        passthroughBehavior: 'when_no_match'
        type: 'mock'
    options:
      responses:
        '200':
          description: '200 response'
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: 'string'
            Access-Control-Allow-Methods:
              schema:
                type: 'string'
            Access-Control-Allow-Headers:
              schema:
                type: 'string'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Empty'
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: '200'
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'GET,OPTIONS'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        requestTemplates:
          application/json: '{"statusCode": 200}'
        passthroughBehavior: 'when_no_match'
        type: 'mock'
  /test:
    post:
      parameters:
        - name: 'accessToken'
          in: 'query'
          required: true
          schema:
            type: 'string'
      responses:
        '200':
          description: '200 response'
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: 'string'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Empty'
      security:
        - cognito-user-pool-auth: []
      x-amazon-apigateway-request-validator:
        "Validate query string parameters and\
        \ headers"
      x-amazon-apigateway-integration:
        httpMethod: 'PUT'
        credentials: 'arn:aws:iam::336249122316:role/service-role/tapedeck-archive-role-bpygtl8x'
        uri: 'arn:aws:apigateway:us-east-2:s3:path/tapedeck-archives/{sub}/{objectKey}'
        responses:
          default:
            statusCode: '200'
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
        requestTemplates:
          application/json:
            "#set($context.requestOverride.path.objectKey = $context.requestId)\n\
            #set($context.requestOverride.path.sub = $context.authorizer.claims.sub)\n\
            $input.body"
        passthroughBehavior: 'when_no_templates'
        type: 'aws'
    options:
      responses:
        '200':
          description: '200 response'
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: 'string'
            Access-Control-Allow-Methods:
              schema:
                type: 'string'
            Access-Control-Allow-Headers:
              schema:
                type: 'string'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Empty'
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: '200'
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'OPTIONS,POST'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        requestTemplates:
          application/json: '{"statusCode": 200}'
        passthroughBehavior: 'when_no_match'
        type: 'mock'
  /hello:
    post:
      parameters:
        - name: 'accessToken'
          in: 'query'
          required: true
          schema:
            type: 'string'
      responses:
        '200':
          description: '200 response'
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: 'string'
          content: {}
      security:
        - cognito-user-pool-auth: []
      x-amazon-apigateway-request-validator:
        "Validate query string parameters and\
        \ headers"
      x-amazon-apigateway-integration:
        httpMethod: 'POST'
        uri: 'arn:aws:apigateway:us-east-2:lambda:path/2015-03-31/functions/arn:aws:lambda:us-east-2:336249122316:function:tapedeck-hello/invocations'
        responses:
          default:
            statusCode: '200'
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
        requestTemplates:
          application/json:
            "{\n  \"sub\": \"$context.authorizer.claims.sub\",\n \
            \ \"url\": \"$util.escapeJavaScript($input.json('$.url'))\",\n  \"desc\"\
            : \"$util.escapeJavaScript($input.json('$.desc'))\"\n}\n"
        passthroughBehavior: 'when_no_templates'
        contentHandling: 'CONVERT_TO_TEXT'
        type: 'aws'
    options:
      responses:
        '200':
          description: '200 response'
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: 'string'
            Access-Control-Allow-Methods:
              schema:
                type: 'string'
            Access-Control-Allow-Headers:
              schema:
                type: 'string'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Empty'
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: '200'
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'OPTIONS,POST'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        requestTemplates:
          application/json: '{"statusCode": 200}'
        passthroughBehavior: 'when_no_match'
        type: 'mock'
components:
  schemas:
    Empty:
      title: 'Empty Schema'
      type: 'object'
  securitySchemes:
    cognito-user-pool-auth:
      type: 'apiKey'
      name: 'Authorization'
      in: 'header'
      x-amazon-apigateway-authtype: 'cognito_user_pools'
      x-amazon-apigateway-authorizer:
        providerARNs:
          - 'arn:aws:cognito-idp:us-east-2:336249122316:userpool/us-east-2_qWWSu06kb'
        type: 'cognito_user_pools'
x-amazon-apigateway-request-validators:
  Validate query string parameters and headers:
    validateRequestParameters: true
    validateRequestBody: false
